@using Chaos.Wedding.Models.Games
@using Chaos.Wedding.Models.Games.Contract
@model Chaos.Wedding.Models.Games.Contract.Question
@{
    var systemData = (SystemData)this.Session["SystemData"];
}

<div class="game-question-type">
    <div><i class="@Model.Type.ImageId" title="@Model.Type.Titles.UserTitle.Title"></i>@Model.Type.Titles.UserTitle.Title</div>
    <div><i class="@Model.Subject.ImageId" title="@Model.Subject.Titles.UserTitle.Title"></i>@Model.Subject.Titles.UserTitle.Title</div>
    <div><i class="@Model.Difficulty.ImageId" title="@Model.Difficulty.Titles.UserTitle.Title"></i>@Model.Difficulty.Titles.UserTitle.Title</div>
    @if (ViewBag.ChallengeLocked)
    {
        <div><i class="fas fa-lock gray" title="@systemData.GetTitle("Locked")"></i></div>
    }
    <div><i class="fas fa-medal gold"></i>@($"{Model.GetScore()} {systemData.GetTitle("Of")} {Model.MaxScore}")</div>
</div>
<div class="game-question-content">
    <div class="game-title">@Model.Titles.UserTitle.Title</div>
    @if (!string.IsNullOrEmpty(Model.Titles.UserTitle.Description))
    {
        <span>@Model.Titles.UserTitle.Description</span>
    }

    @if (!string.IsNullOrEmpty(Model.ImageId))
    {
        <img src="~/Content/images/store/@Model.ImageId" />
    }

    @if (Model.QuestionType == QuestionType.SingleChoice || Model.QuestionType == QuestionType.TrueOrFalse)
    {
        <div class="game-alternatives-choice">
            @foreach (var alternative in Model.Alternatives)
            {
                if (ViewBag.ChallengeLocked)
                {
                    <div class="@Model.GetAlternativeCssClass(alternative, ViewBag.ChallengeLocked)">@Html.Partial("_AnswerAlternative", alternative)</div>
                }
                else
                {
                    <div class="@Model.GetAlternativeCssClass(alternative, ViewBag.ChallengeLocked)" data-alternative="@alternative.Id" onclick="selectedSingleChoice(this, '@alternative.Id');">@Html.Partial("_AnswerAlternative", alternative)</div>
                }
            }
        </div>
    }
    else if (Model.QuestionType == QuestionType.MultiChoice)
    {
        <div class="game-alternatives-choice">
            @foreach (var alternative in Model.Alternatives)
            {
                if (ViewBag.ChallengeLocked)
                {
                    <div class="@Model.GetAlternativeCssClass(alternative, ViewBag.ChallengeLocked)">@Html.Partial("_AnswerAlternative", alternative)</div>
                }
                else
                {
                    <div class="@Model.GetAlternativeCssClass(alternative, ViewBag.ChallengeLocked)" data-alternative="@alternative.Id" onclick="selectedMultiChoice(this, '@alternative.Id', @Model.MaxChoices);">@Html.Partial("_AnswerAlternative", alternative)</div>
                }
            }
        </div>
    }
    else if (Model.QuestionType == QuestionType.Match || Model.QuestionType == QuestionType.Sort || Model.QuestionType == QuestionType.SortAndMatch)
    {
        var unansweredAlternatives = Model.Alternatives.ToList().Shuffle();
        <div class="@($"game-alternatives-grid{Model.ColumnCount}")">
            @for (var row = 1; row <= Model.RowCount; row++)
            {
                for (var column = 1; column <= Model.ColumnCount; column++)
                {
                    var alternative = Model.Alternatives.FirstOrDefault(a => a.CorrectRow == row && a.CorrectColumn == column);
                    if (alternative == null)
                    {
                        <div class="game-alternative incorrect">Error</div>
                    }
                    else if (column == 1 && Model.QuestionType == QuestionType.Match)
                    {
                        unansweredAlternatives.Remove(alternative);
                        <div class="game-alternative frozen">@Html.Partial("_AnswerAlternative", alternative)</div>
                    }
                    else
                    {
                        var answer = Model.Alternatives.FirstOrDefault(a => a.TeamAnswer?.AnsweredRow == row && a.TeamAnswer?.AnsweredColumn == column);
                        <div id="@($"DragTarget{alternative.Id}")" data-question="@Model.Id" data-row="@alternative.CorrectRow" data-column="@alternative.CorrectColumn" class="game-alternative-drop" ondrop="drop(event)" ondragover="allowDrop(event)">
                            @if (answer != null)
                            {
                                unansweredAlternatives.Remove(answer);
                                if (ViewBag.ChallengeLocked)
                                {
                                    if (alternative == answer)
                                    {
                                        <div class="@Model.GetAlternativeCssClass(answer, ViewBag.ChallengeLocked)">@Html.Partial("_AnswerAlternative", answer)</div>
                                    }
                                    else if (!string.IsNullOrEmpty(alternative.ImageId))
                                    {
                                        <div>
                                            <div class="game-alternative missed half">@Html.Partial("_AnswerAlternative", alternative)</div>
                                            <div class="game-alternative incorrect half">@Html.Partial("_AnswerAlternative", answer)</div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="@Model.GetAlternativeCssClass(answer, ViewBag.ChallengeLocked)"><span style="text-decoration: line-through;">@answer.Titles.UserTitle.Title</span>@Html.Partial("_AnswerAlternative", alternative)</div>
                                    }
                                }
                                else
                                {
                                    <div id="@($"DragAlternative{answer.Id}")" data-question="@Model.Id" data-row="@answer.CorrectRow" data-column="@answer.CorrectColumn" data-alternative="@answer.Id" class="game-alternative selected touch" draggable="true" ondragstart="drag(event)">@Html.Partial("_AnswerAlternative", answer)</div>
                                }
                            }
                            else if (ViewBag.ChallengeLocked)
                            {
                                <div class="game-alternative missed">@Html.Partial("_AnswerAlternative", alternative)</div>
                            }
                        </div>
                    }
                }
            }
        </div>
        <div id="@($"DragContainer{Model.Id}")" data-question="@Model.Id" class="@($"game-alternatives-container{Model.ColumnCount}")" ondrop="drop(event)" ondragover="allowDrop(event)">
            @foreach (var alternative in unansweredAlternatives)
            {
                if (ViewBag.ChallengeLocked)
                {
                    <div class="game-alternative missed">@Html.Partial("_AnswerAlternative", alternative)</div>
                }
                else
                {
                    <div id="@($"DragAlternative{alternative.Id}")" data-question="@Model.Id" data-row="@alternative.CorrectRow" data-column="@alternative.CorrectColumn" data-alternative="@alternative.Id" class="game-alternative touch" draggable="true" ondragstart="drag(event)">@Html.Partial("_AnswerAlternative", alternative)</div>
                }
            }
        </div>
    }
</div>

@*<div class="game-alternative-choice correct" onclick="selectedSingleChoice(this);">Correct</div>
    <div class="game-alternative-choice selected" onclick="selectedSingleChoice(this);">Selected</div>
    <div class="game-alternative-choice incorrect" onclick="selectedSingleChoice(this);">Incorrect</div>
    <div class="game-alternative-choice missed" onclick="selectedSingleChoice(this);">Missed</div>*@
